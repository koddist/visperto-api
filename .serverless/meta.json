{
  "/Users/ayaz/Desktop/projects/visperto/api": {
    "versionSfCore": null,
    "versionFramework": "4.0.38",
    "isWithinCompose": false,
    "composeOrgName": null,
    "servicePath": "/Users/ayaz/Desktop/projects/visperto/api",
    "serviceConfigFileName": "serverless.yaml",
    "service": {
      "org": "visperto",
      "service": "visperto-api",
      "useDotenv": true,
      "plugins": [
        "serverless-offline"
      ],
      "package": {
        "exclude": [
          ".gitignore",
          ".git/**"
        ],
        "include": [
          "dist/**",
          "src/**"
        ]
      },
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "eu-central-1",
        "environment": {
          "MONGODB_USER": "${env:MONGODB_USER}",
          "MONGODB_PASSWORD": "<REDACTED>",
          "MONGODB_DB": "${env:MONGODB_DB}",
          "MONGODB_CLOUD_USER": "${env:MONGODB_CLOUD_USER}",
          "MONGODB_CLOUD_PASSWORD": "<REDACTED>",
          "LOGTAIL_TOKEN": "<REDACTED>",
          "AMADEUS_CLIENT_ID": "${env:AMADEUS_CLIENT_ID}",
          "AMADEUS_CLIENT_SECRET": "<REDACTED>",
          "IPGEOLOCATION_API_KEY": "<REDACTED>",
          "UNSPLASH_API_KEY": "<REDACTED>"
        }
      },
      "functions": {
        "main": {
          "handler": "dist/serverless.handler",
          "events": [
            {
              "httpApi": {
                "method": "GET",
                "path": "/"
              }
            },
            {
              "httpApi": {
                "method": "GET",
                "path": "/countries"
              }
            },
            {
              "httpApi": {
                "method": "GET",
                "path": "/countries_with_details"
              }
            },
            {
              "httpApi": {
                "method": "GET",
                "path": "/country/{id}"
              }
            },
            {
              "httpApi": {
                "method": "GET",
                "path": "/restriction/{id}"
              }
            },
            {
              "httpApi": {
                "method": "GET",
                "path": "/timezones"
              }
            },
            {
              "httpApi": {
                "method": "GET",
                "path": "/visa_req"
              }
            },
            {
              "httpApi": {
                "method": "GET",
                "path": "/weather"
              }
            },
            {
              "httpApi": {
                "method": "GET",
                "path": "/exchange"
              }
            },
            {
              "httpApi": {
                "method": "GET",
                "path": "/selected"
              }
            },
            {
              "httpApi": {
                "method": "GET",
                "path": "/time"
              }
            }
          ]
        }
      }
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\norg: visperto\nservice: visperto-api\nuseDotenv: true\nplugins:\n  - serverless-offline\n\npackage:\n  exclude:\n    - .gitignore\n    - .git/**\n\n  include:\n    - dist/**\n    - src/**\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  region: eu-central-1\n  environment:\n    MONGODB_USER: ${env:MONGODB_USER}\n    MONGODB_PASSWORD: ${env:MONGODB_PASSWORD}\n    MONGODB_DB: ${env:MONGODB_DB}\n    MONGODB_CLOUD_USER: ${env:MONGODB_CLOUD_USER}\n    MONGODB_CLOUD_PASSWORD: ${env:MONGODB_CLOUD_PASSWORD}\n    LOGTAIL_TOKEN: ${env:LOGTAIL_TOKEN}\n    AMADEUS_CLIENT_ID: ${env:AMADEUS_CLIENT_ID}\n    AMADEUS_CLIENT_SECRET: ${env:AMADEUS_CLIENT_SECRET}\n    IPGEOLOCATION_API_KEY: ${env:IPGEOLOCATION_API_KEY}\n    UNSPLASH_API_KEY: ${env:UNSPLASH_API_KEY}\n\nfunctions:\n  main:\n    handler: dist/serverless.handler\n    events:\n      - httpApi:\n          method: GET\n          path: /\n      - httpApi:\n          method: GET\n          path: /countries\n      - httpApi:\n          method: GET\n          path: /countries_with_details\n      - httpApi:\n          method: GET\n          path: /country/{id}\n      - httpApi:\n          method: GET\n          path: /restriction/{id}\n      - httpApi:\n          method: GET\n          path: /timezones\n      - httpApi:\n          method: GET\n          path: /visa_req\n      - httpApi:\n          method: GET\n          path: /weather\n      - httpApi:\n          method: GET\n          path: /exchange\n      - httpApi:\n          method: GET\n          path: /selected\n      - httpApi:\n          method: GET\n          path: /time\n#  updateCountries:\n#    handler: dist/serverless.updateCountries\n#    events:\n#      - schedule:\n#          method: scheduler\n#          rate:\n#            - cron(0 3 2 * ? *)\n#          timezone: Europe/Berlin\n#  updateCountriesTimezone:\n#    handler: dist/serverless.updateCountriesTimezone\n#    events:\n#      - schedule:\n#          method: scheduler\n#          rate:\n#            - cron(0 5 2 * ? *)\n#          timezone: Europe/Berlin\n",
    "command": [
      "offline"
    ],
    "options": {},
    "error": {
      "message": "AWS credentials appear to be invalid. Run \"serverless\" to set up AWS credentials, or learn more in our docs: http://slss.io/aws-creds-setup. Original error from AWS: \"The security token included in the request is invalid.\"",
      "code": "AWS_CREDENTIALS_MISSING"
    },
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "bb2ca63f-1c06-4d6b-a8b1-0d25723631bb",
    "orgName": "visperto",
    "userId": "Br6ng8RWXDlcmNkWzQ",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "visperto",
    "subscription": null,
    "userEmail": "ayazweb@gmail.com",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}